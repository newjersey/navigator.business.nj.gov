version: 2.1

commands:
  bootstrap-code:
    steps:
      - checkout
      - run:
          name: Check Cypress Version
          command: yarn info --json cypress | jq .children.Version > cypress.lock
      - restore_cache:
          keys:
            - v8-cypress-deps-{{ checksum "cypress.lock" }}
      - restore_cache:
          keys:
            - v8-yarn-deploy-deps-{{ checksum "yarn.lock" }}
            - v8-yarn-deps-{{ checksum "yarn.lock" }}
            - v8-yarn-deploy-deps-
            - v8-yarn-deps-
      - run:
          name: Install yarn packages
          command: yarn install

  install-dynamodb:
    steps:
      - run:
          name: Install Dynamodb local
          command: yarn workspace @businessnjgovnavigator/api install-dynamo-local

  configure:
    steps:
      - bootstrap-code
      - run:
          name: Configure Serverless
          command: yarn workspace @businessnjgovnavigator/api serverless config credentials --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY}

  configure-smoke-test:
    steps:
      - run: sudo apt update
      - bootstrap-code

  package-webapp-docker:
    parameters:
      image-name:
        type: string
    steps:
      - run:
          name: Build Web Docker image
          command: docker build -f WebApp.Dockerfile . -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bfs_containers:<< parameters.image-name >>-${CIRCLE_SHA1} -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bfs_containers:<< parameters.image-name >> -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bfs_containers:<< parameters.image-name >>-latest
      - run:
          name: Push Web Docker image
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bfs_containers:<< parameters.image-name >>-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bfs_containers:<< parameters.image-name >>
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bfs_containers:<< parameters.image-name >>-latest

  configure-and-build:
    steps:
      - configure
      - run:
          name: Build
          command: yarn build

  code-quality:
    steps:
      - run:
          name: Run Typecheck
          command: yarn typecheck
      - run:
          name: Run Cypress Typecheck
          command: yarn workspace @businessnjgovnavigator/web typecheck:cypress
      - run:
          name: Run Prettier
          command: yarn prettier:check
      - run:
          name: Run Linting
          command: yarn lint
      - run:
          name: Run Spell Checker
          command: yarn run spellcheck
      - run:
          name: Run Dependency Check
          command: yarn dependency-check

  perform-integration-tests:
    parameters:
      enable-dashboard:
        type: boolean
      suite:
        type: string
      browser:
        type: string
    steps:
      - run:
          name: Start services
          command: yarn workspace @businessnjgovnavigator/api start & yarn workspace @businessnjgovnavigator/api start:wiremock & yarn workspace @businessnjgovnavigator/web start
          background: true
          no_output_timeout: 30m
      - run:
          name: Run Tests
          no_output_timeout: 30m
          command: yarn cypress:run --browser=<< parameters.browser >> --record=<< parameters.enable-dashboard >> --env SUITE=<< parameters.suite >>
          working_directory: web
      - store_test_results:
          path: web/cypress/results
      - store_artifacts:
          name: Store Cypress Screenshots
          path: web/cypress/screenshots
      - store_artifacts:
          name: Store Cypress Videos
          path: web/cypress/videos

  perform-smoke-tests:
    parameters:
      enable-dashboard:
        type: boolean
      suite:
        type: string
    steps:
      - run:
          name: Install Additional Tools
          command: sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - run:
          name: Run Tests
          command: yarn cypress:run --browser=chrome --record=<< parameters.enable-dashboard >> --env SUITE=<< parameters.suite >> --config baseUrl=${SMOKE_TEST_ENV}
          working_directory: web
      - store_test_results:
          path: web/cypress/results
      - store_artifacts:
          name: Store Cypress Screenshots
          path: web/cypress/screenshots
      - store_artifacts:
          name: Store Cypress Videos
          path: web/cypress/videos

  store-cache:
    steps:
      - run:
          name: Check Cypress Version
          command: yarn info --json cypress | jq .children.Version > cypress.lock
      - save_cache:
          key: v8-cypress-deps-{{ checksum "cypress.lock" }}
          paths:
            - ~/.cache/Cypress
      - save_cache:
          key: v8-yarn-deps-{{ checksum "yarn.lock" }}
          paths:
            - ./.yarn/cache
            - ~/.npm-global

  store-deploy-cache:
    steps:
      - save_cache:
          key: v8-yarn-deploy-deps-{{ checksum "yarn.lock" }}
          paths:
            - ./.yarn/cache
            - ./web/.next/cache
            - ~/.npm-global

  deploy-serverless:
    steps:
      - run:
          name: Deploy Serverless
          command: yarn workspace @businessnjgovnavigator/api serverless deploy --verbose --stage ${STAGE} --region us-east-1

  set-dev-env-vars:
    steps:
      - run:
          name: Set Development Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_DEV' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_DEV' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_DEV' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_DEV' >> $BASH_ENV
            echo 'export COGNITO_IDENTITY_POOL_ID=$COGNITO_IDENTITY_POOL_ID_DEV' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_DEV' >> $BASH_ENV
            echo 'export FORMATION_API_BASE_URL=$FORMATION_API_BASE_URL_DEV' >> $BASH_ENV
            echo 'export FEATURE_EXPORT_PDF=$FEATURE_EXPORT_PDF_DEV' >> $BASH_ENV
            echo 'export FORMATION_API_KEY=$FORMATION_API_KEY_DEV' >> $BASH_ENV
            echo 'export FORMATION_API_ACCOUNT=$FORMATION_API_ACCOUNT_DEV' >> $BASH_ENV
            echo 'export GOV2GO_REGISTRATION_API_KEY=$GOV2GO_REGISTRATION_API_KEY_DEV' >> $BASH_ENV
            echo 'export GOV2GO_REGISTRATION_BASE_URL=$GOV2GO_REGISTRATION_BASE_URL_DEV' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_DEV' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_DEV' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_DEV' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_DEV' >> $BASH_ENV

            echo 'export FEATURE_BUSINESS_FLP=$FEATURE_BUSINESS_FLP_DEV' >> $BASH_ENV
            echo 'export FEATURE_BUSINESS_FLP_STAGING=$FEATURE_BUSINESS_FLP_STAGING' >> $BASH_ENV
            echo 'export FEATURE_BUSINESS_FLP_PROD=$FEATURE_BUSINESS_FLP_PROD' >> $BASH_ENV

            echo 'export FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY=$FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY_DEV' >> $BASH_ENV

            echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEV' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEV' >> $BASH_ENV
            echo 'export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_DEV' >> $BASH_ENV
            echo 'export SMOKE_TEST_ENV=$SMOKE_TEST_ENV_DEV' >> $BASH_ENV
            echo 'export CHECK_DEAD_LINKS=$CHECK_DEAD_LINKS_DEV' >> $BASH_ENV
            echo 'export AB_TESTING_EXPERIENCE_B_PERCENTAGE=$AB_TESTING_EXPERIENCE_B_PERCENTAGE_DEV' >> $BASH_ENV
            echo 'export AIRTABLE_USERS_TABLE=$AIRTABLE_USERS_TABLE_DEV' >> $BASH_ENV
            echo 'export AWS_CRYPTO_KEY=$AWS_CRYPTO_KEY_DEV' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_STAGE=$AWS_CRYPTO_CONTEXT_STAGE_DEV' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_PURPOSE=$AWS_CRYPTO_CONTEXT_PURPOSE' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_ORIGIN=$AWS_CRYPTO_CONTEXT_ORIGIN' >> $BASH_ENV
            echo 'export ADMIN_PASSWORD=$ADMIN_PASSWORD' >> $BASH_ENV
            echo 'export USE_BASIC_AUTH=$USE_BASIC_AUTH_DEV' >> $BASH_ENV
            echo 'export BASIC_AUTH_USERNAME=$BASIC_AUTH_USERNAME' >> $BASH_ENV
            echo 'export BASIC_AUTH_PASSWORD=$BASIC_AUTH_PASSWORD' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_URL=$DYNAMICS_LICENSE_STATUS_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_CLIENT_ID=$DYNAMICS_LICENSE_STATUS_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_SECRET=$DYNAMICS_LICENSE_STATUS_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_TENANT_ID=$DYNAMICS_LICENSE_STATUS_TENANT_ID_DEV' >> $BASH_ENV
            echo 'export FEATURE_DYNAMICS_PUBLIC_MOVERS=$FEATURE_DYNAMICS_PUBLIC_MOVERS_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_URL=$DYNAMICS_FIRE_SAFETY_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_CLIENT_ID=$DYNAMICS_FIRE_SAFETY_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_SECRET=$DYNAMICS_FIRE_SAFETY_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_TENANT_ID=$DYNAMICS_FIRE_SAFETY_TENANT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_URL=$DYNAMICS_HOUSING_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_CLIENT_ID=$DYNAMICS_HOUSING_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_SECRET=$DYNAMICS_HOUSING_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_TENANT_ID=$DYNAMICS_HOUSING_TENANT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_URL=$DYNAMICS_ELEVATOR_SAFETY_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_CLIENT_ID=$DYNAMICS_ELEVATOR_SAFETY_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_SECRET=$DYNAMICS_ELEVATOR_SAFETY_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_TENANT_ID=$DYNAMICS_ELEVATOR_SAFETY_TENANT_ID_DEV' >> $BASH_ENV

  set-cypress-env-vars:
    steps:
      - run:
          name: Set Cypress Environment Variables
          command: |
            echo 'export API_BASE_URL=http://localhost:5002/local' >> $BASH_ENV
            echo 'export USE_FAKE_SELF_REG=true' >> $BASH_ENV
            echo 'export REDIRECT_URL=http://localhost:3000/' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_DEV' >> $BASH_ENV

            echo 'export FEATURE_BUSINESS_FLP=false' >> $BASH_ENV
            echo 'export FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY=true' >> $BASH_ENV

            echo 'export COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_DEV' >> $BASH_ENV
            echo 'export COGNITO_IDENTITY_POOL_ID=$COGNITO_IDENTITY_POOL_ID_DEV' >> $BASH_ENV
            echo 'export CYPRESS_COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export CYPRESS_COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_DEV' >> $BASH_ENV
            echo 'export CYPRESS_COGNITO_IDENTITY_POOL_ID=$COGNITO_IDENTITY_POOL_ID_DEV' >> $BASH_ENV
            echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEV' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEV' >> $BASH_ENV
            echo 'export CHECK_DEAD_LINKS=$CHECK_DEAD_LINKS_DEV' >> $BASH_ENV
            echo 'export ADMIN_PASSWORD=Test1!' >> $BASH_ENV
            echo 'export SKIP_SAVE_DOCUMENTS_TO_S3=true' >> $BASH_ENV
            echo 'export AWS_CRYPTO_KEY=$AWS_CRYPTO_KEY_DEV' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_STAGE=$AWS_CRYPTO_CONTEXT_STAGE_DEV' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_PURPOSE=$AWS_CRYPTO_CONTEXT_PURPOSE' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_ORIGIN=$AWS_CRYPTO_CONTEXT_ORIGIN' >> $BASH_ENV
            echo 'export DISABLE_GTM=true' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_URL=$DYNAMICS_LICENSE_STATUS_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_CLIENT_ID=$DYNAMICS_LICENSE_STATUS_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_SECRET=$DYNAMICS_LICENSE_STATUS_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_TENANT_ID=$DYNAMICS_LICENSE_STATUS_TENANT_ID_DEV' >> $BASH_ENV
            echo 'export FEATURE_DYNAMICS_PUBLIC_MOVERS=$FEATURE_DYNAMICS_PUBLIC_MOVERS_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_URL=$DYNAMICS_FIRE_SAFETY_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_CLIENT_ID=$DYNAMICS_FIRE_SAFETY_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_SECRET=$DYNAMICS_FIRE_SAFETY_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_TENANT_ID=$DYNAMICS_FIRE_SAFETY_TENANT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_URL=$DYNAMICS_HOUSING_URL_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_CLIENT_ID=$DYNAMICS_HOUSING_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_SECRET=$DYNAMICS_HOUSING_SECRET_DEV' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_TENANT_ID=$DYNAMICS_HOUSING_TENANT_ID_DEV' >> $BASH_ENV

  set-staging-env-vars:
    steps:
      - run:
          name: Set Staging Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_STAGING' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_STAGING' >> $BASH_ENV
            echo 'export FEATURE_EXPORT_PDF=$FEATURE_EXPORT_PDF_STAGING' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_STAGING' >> $BASH_ENV
            echo 'export COGNITO_IDENTITY_POOL_ID=$COGNITO_IDENTITY_POOL_ID_STAGING' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export FORMATION_API_BASE_URL=$FORMATION_API_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export FORMATION_API_KEY=$FORMATION_API_KEY_STAGING' >> $BASH_ENV
            echo 'export FORMATION_API_ACCOUNT=$FORMATION_API_ACCOUNT_STAGING' >> $BASH_ENV
            echo 'export GOV2GO_REGISTRATION_API_KEY=$GOV2GO_REGISTRATION_API_KEY_STAGING' >> $BASH_ENV
            echo 'export GOV2GO_REGISTRATION_BASE_URL=$GOV2GO_REGISTRATION_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_STAGING' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_STAGING' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_STAGING' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_STAGING' >> $BASH_ENV

            echo 'export FEATURE_BUSINESS_FLP=$FEATURE_BUSINESS_FLP_STAGING' >> $BASH_ENV
            echo 'export FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY=$FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY_STAGING' >> $BASH_ENV

            echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_STAGING' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_STAGING' >> $BASH_ENV
            echo 'export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_STAGING' >> $BASH_ENV
            echo 'export CHECK_DEAD_LINKS=$CHECK_DEAD_LINKS_STAGING' >> $BASH_ENV
            echo 'export AB_TESTING_EXPERIENCE_B_PERCENTAGE=$AB_TESTING_EXPERIENCE_B_PERCENTAGE_STAGING' >> $BASH_ENV
            echo 'export AIRTABLE_USERS_TABLE=$AIRTABLE_USERS_TABLE_DEV' >> $BASH_ENV
            echo 'export AWS_CRYPTO_KEY=$AWS_CRYPTO_KEY_STAGING' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_STAGE=$AWS_CRYPTO_CONTEXT_STAGE_STAGING' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_PURPOSE=$AWS_CRYPTO_CONTEXT_PURPOSE' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_ORIGIN=$AWS_CRYPTO_CONTEXT_ORIGIN' >> $BASH_ENV
            echo 'export USE_BASIC_AUTH=$USE_BASIC_AUTH_STAGING' >> $BASH_ENV
            echo 'export BASIC_AUTH_USERNAME=$BASIC_AUTH_USERNAME' >> $BASH_ENV
            echo 'export BASIC_AUTH_PASSWORD=$BASIC_AUTH_PASSWORD' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_URL=$DYNAMICS_LICENSE_STATUS_URL_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_CLIENT_ID=$DYNAMICS_LICENSE_STATUS_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_SECRET=$DYNAMICS_LICENSE_STATUS_SECRET_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_TENANT_ID=$DYNAMICS_LICENSE_STATUS_TENANT_ID_STAGING' >> $BASH_ENV
            echo 'export FEATURE_DYNAMICS_PUBLIC_MOVERS=$FEATURE_DYNAMICS_PUBLIC_MOVERS_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_URL=$DYNAMICS_FIRE_SAFETY_URL_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_CLIENT_ID=$DYNAMICS_FIRE_SAFETY_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_SECRET=$DYNAMICS_FIRE_SAFETY_SECRET_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_TENANT_ID=$DYNAMICS_FIRE_SAFETY_TENANT_ID_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_URL=$DYNAMICS_HOUSING_URL_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_CLIENT_ID=$DYNAMICS_HOUSING_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_SECRET=$DYNAMICS_HOUSING_SECRET_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_TENANT_ID=$DYNAMICS_HOUSING_TENANT_ID_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_URL=$DYNAMICS_ELEVATOR_SAFETY_URL_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_CLIENT_ID=$DYNAMICS_ELEVATOR_SAFETY_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_SECRET=$DYNAMICS_ELEVATOR_SAFETY_SECRET_STAGING' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_TENANT_ID=$DYNAMICS_ELEVATOR_SAFETY_TENANT_ID_STAGING' >> $BASH_ENV

  set-prod-env-vars:
    steps:
      - run:
          name: Set Production Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_PROD' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_PROD' >> $BASH_ENV
            echo 'export FEATURE_EXPORT_PDF=$FEATURE_EXPORT_PDF_PROD' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_PROD' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID_PROD' >> $BASH_ENV
            echo 'export COGNITO_IDENTITY_POOL_ID=$COGNITO_IDENTITY_POOL_ID_PROD' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_PROD' >> $BASH_ENV
            echo 'export FORMATION_API_BASE_URL=$FORMATION_API_BASE_URL_PROD' >> $BASH_ENV
            echo 'export FORMATION_API_KEY=$FORMATION_API_KEY_PROD' >> $BASH_ENV
            echo 'export FORMATION_API_ACCOUNT=$FORMATION_API_ACCOUNT_PROD' >> $BASH_ENV
            echo 'export GOV2GO_REGISTRATION_API_KEY=$GOV2GO_REGISTRATION_API_KEY_PROD' >> $BASH_ENV
            echo 'export GOV2GO_REGISTRATION_BASE_URL=$GOV2GO_REGISTRATION_BASE_URL_PROD' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_PROD' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_PROD' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_PROD' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_PROD' >> $BASH_ENV

            echo 'export FEATURE_BUSINESS_FLP=$FEATURE_BUSINESS_FLP_PROD' >> $BASH_ENV
            echo 'export FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY=$FEATURE_FORMATION_CONTENT_TYPE_PLAIN_ONLY_PROD' >> $BASH_ENV

            echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_NEWPROD' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_NEWPROD' >> $BASH_ENV
            echo 'export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_PROD' >> $BASH_ENV
            echo 'export CHECK_DEAD_LINKS=$CHECK_DEAD_LINKS_PROD' >> $BASH_ENV
            echo 'export AB_TESTING_EXPERIENCE_B_PERCENTAGE=$AB_TESTING_EXPERIENCE_B_PERCENTAGE_PROD' >> $BASH_ENV
            echo 'export AIRTABLE_USERS_TABLE=$AIRTABLE_USERS_TABLE_PROD' >> $BASH_ENV
            echo 'export AWS_CRYPTO_KEY=$AWS_CRYPTO_KEY_PROD' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_STAGE=$AWS_CRYPTO_CONTEXT_STAGE_PROD' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_PURPOSE=$AWS_CRYPTO_CONTEXT_PURPOSE' >> $BASH_ENV
            echo 'export AWS_CRYPTO_CONTEXT_ORIGIN=$AWS_CRYPTO_CONTEXT_ORIGIN' >> $BASH_ENV
            echo 'export OUTAGE_ALERT_CONFIG_URL=$OUTAGE_ALERT_CONFIG_URL' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_URL=$DYNAMICS_LICENSE_STATUS_URL_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_CLIENT_ID=$DYNAMICS_LICENSE_STATUS_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_SECRET=$DYNAMICS_LICENSE_STATUS_SECRET_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_LICENSE_STATUS_TENANT_ID=$DYNAMICS_LICENSE_STATUS_TENANT_ID_PROD' >> $BASH_ENV
            echo 'export FEATURE_DYNAMICS_PUBLIC_MOVERS=$FEATURE_DYNAMICS_PUBLIC_MOVERS_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_URL=$DYNAMICS_FIRE_SAFETY_URL_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_CLIENT_ID=$DYNAMICS_FIRE_SAFETY_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_SECRET=$DYNAMICS_FIRE_SAFETY_SECRET_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_FIRE_SAFETY_TENANT_ID=$DYNAMICS_LICENSE_FIRE_SAFETY_ID_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_URL=$DYNAMICS_HOUSING_URL_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_CLIENT_ID=$DYNAMICS_HOUSING_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_SECRET=$DYNAMICS_HOUSING_SECRET_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_HOUSING_TENANT_ID=$DYNAMICS_HOUSING_TENANT_ID_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_URL=$DYNAMICS_ELEVATOR_SAFETY_URL_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_CLIENT_ID=$DYNAMICS_ELEVATOR_SAFETY_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_SECRET=$DYNAMICS_ELEVATOR_SAFETY_SECRET_PROD' >> $BASH_ENV
            echo 'export DYNAMICS_ELEVATOR_SAFETY_TENANT_ID=$DYNAMICS_ELEVATOR_SAFETY_TENANT_ID_PROD' >> $BASH_ENV

  set-content-env-vars:
    steps:
      - run:
          name: Set Content Environment Variables
          command: |
            echo 'export REDIRECT_URL=$REDIRECT_URL_CONTENT' >> $BASH_ENV
            echo 'export SHOW_DISABLED_INDUSTRIES=true' >> $BASH_ENV

  set-accessibility-testing-env-vars:
    steps:
      - run:
          name: Set Accessibility Testing Environment Variables
          command: |
            echo 'export REDIRECT_URL=$REDIRECT_URL_ACCESSIBILITY_TESTING' >> $BASH_ENV

  deploy-content:
    steps:
      - configure-and-build
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - package-webapp-docker:
          image-name: bfs-navigator-content
      - run:
          name: Deploy WebApp
          command: aws ecs update-service --cluster bfs_container_cluster --service bfs-navigator-content --region ${AWS_REGION} --force-new-deployment

  deploy-accessibility-testing:
    steps:
      - configure-and-build
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - package-webapp-docker:
          image-name: bfs-navigator-testing
      - run:
          name: Deploy WebApp
          command: aws ecs update-service --cluster bfs_container_cluster --service bfs-navigator-testing --region ${AWS_REGION} --force-new-deployment

  deploy:
    steps:
      - configure-and-build
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - package-webapp-docker:
          image-name: bfs-navigator
      - deploy-serverless
      - run:
          name: Deploy WebApp
          command: aws ecs update-service --cluster bfs_container_cluster --service bfs-navigator --region ${AWS_REGION} --force-new-deployment

  deploy-storybook:
    steps:
      - run:
          name: Clear Storybook S3 Bucket
          command: aws s3 rm s3://$STORYBOOK_S3_BUCKET --recursive
      - run:
          name: Deploy Storybook
          command: yarn workspace @businessnjgovnavigator/web deploy:storybook --bucket-path $STORYBOOK_S3_BUCKET  --aws-profile=NONE

  install-chrome:
    steps:
      - run:
          name: Install Chrome
          command: |
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome-stable_current_amd64.deb

  install-edge:
    parameters:
      browser:
        type: string
    steps:
      - run:
          name: Install Edge
          command: |
            if [[ << parameters.browser >> == 'edge' ]]; then
              curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
              sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
              sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
              sudo rm microsoft.gpg
              sudo apt update && sudo apt install microsoft-edge-stable
            fi

  install-firefox:
    parameters:
      browser:
        type: string
    steps:
      - run:
          name: Install Firefox
          command: |
            if [[ << parameters.browser >> == 'firefox' ]]; then
              sudo apt install firefox
            fi

  install-awscli:
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install awscli

  install-github-cli:
    steps:
      - run:
          name: Install Github CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt -y install gh

  generate-release-notes:
    steps:
      - run:
          name: Generate Release Notes
          command: yarn semantic-release --branches $CIRCLE_BRANCH
      - run:
          name: Create PR to main
          command: |
            git status
            gh pr create --fill --base main --head $CIRCLE_BRANCH

  build-and-push-custom-node-image:
    parameters:
      image-name:
        type: string
    steps:
      - run:
          name: Build  Docker Image
          command: docker build -f BuilderImage.Dockerfile . -t ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com/navigator_builder:<< parameters.image-name >>-${CIRCLE_SHA1} -t ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com/navigator_builder:<< parameters.image-name >> -t ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com/navigator_builder:<< parameters.image-name >>-latest
      - run:
          name: Push Builder Docker Image
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com
            docker push ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com/navigator_builder:<< parameters.image-name >>-${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com/navigator_builder:<< parameters.image-name >>
            docker push ${AWS_ACCOUNT_ID_DEV}.dkr.ecr.${AWS_REGION}.amazonaws.com/navigator_builder:<< parameters.image-name >>-latest

  docker-setup-navigator-builder-image:
    steps:
      - install-awscli
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - checkout
      - build-and-push-custom-node-image:
          image-name: bfs_navigator_builder-20_11_0

jobs:
  merge-content:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - checkout
      - run:
          name: Update content-repo branch
          command: |
            export GIT_MERGE_AUTOEDIT=no
            gh auth setup-git
            git config --global user.email "innovation-admin@nj.gov"
            git config --global user.name  "NJ Innovation CI"
            git checkout content-repo
            git merge origin/main
            git push

  build:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-dev-env-vars
      - configure-and-build
      - store-cache
      - persist_to_workspace:
          root: .
          paths:
            - "*"

  lint:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-dev-env-vars
      - attach_workspace:
          at: .
      - configure
      - code-quality

  test:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    parallelism: 8
    steps:
      - set-dev-env-vars
      - attach_workspace:
          at: .
      - configure
      - run:
          name: Glob, Split, and Run Unit Tests
          command: |
            yarn test:ci --shard=$(expr $CIRCLE_NODE_INDEX + 1)/$CIRCLE_NODE_TOTAL
      - store_test_results:
          path: coverage/test_results
      - store_artifacts:
          name: Store Jest Coverage
          path: coverage

  prepare-release:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    resource_class: small
    steps:
      - set-prod-env-vars
      - bootstrap-code
      - generate-release-notes

  deploy-content:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-dev-env-vars
      - set-content-env-vars
      - attach_workspace:
          at: .
      - deploy-content
    environment:
      STAGE: content
      MYNJ_PROFILE_LINK: https://myt1.nj.gov/portal/Desktop

  deploy-accessibility-testing:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-dev-env-vars
      - set-accessibility-testing-env-vars
      - attach_workspace:
          at: .
      - deploy-accessibility-testing
    environment:
      STAGE: testing
      MYNJ_PROFILE_LINK: https://myt1.nj.gov/portal/Desktop

  deploy-dev:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-dev-env-vars
      - attach_workspace:
          at: .
      - deploy
      - deploy-storybook
      - store-deploy-cache
    environment:
      STAGE: dev
      MYNJ_PROFILE_LINK: https://myt1.nj.gov/portal/Desktop

  deploy-staging:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-staging-env-vars
      - deploy
    environment:
      STAGE: staging
      MYNJ_PROFILE_LINK: https://myt1.nj.gov/portal/Desktop

  deploy-production:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-prod-env-vars
      - deploy
    environment:
      STAGE: prod
      MYNJ_PROFILE_LINK: https://my.nj.gov/portal/Desktop

  integration-tests:
    parameters:
      enable-dashboard:
        type: boolean
        default: false
      suite:
        type: string
      browser:
        type: string
        default: "chrome"
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - set-cypress-env-vars
      - attach_workspace:
          at: .
      - configure-and-build
      - install-dynamodb
      - perform-integration-tests:
          enable-dashboard: << parameters.enable-dashboard >>
          suite: << parameters.suite >>
          browser: << parameters.browser >>
    environment:
      CYPRESS_API_BASE_URL: http://localhost:5002/local

  smoke-tests:
    parameters:
      enable-dashboard:
        type: boolean
        default: false
      suite:
        type: string
    docker:
      - image: cimg/node:20.11.0-browsers
    steps:
      - attach_workspace:
          at: .
      - set-dev-env-vars
      - configure-smoke-test
      - install-chrome
      - perform-smoke-tests:
          enable-dashboard: << parameters.enable-dashboard >>
          suite: << parameters.suite >>

  #Maybe have a move this to a image folder
  docker-build-builder-image:
    docker:
      - image: cimg/node:20.11.0
    steps:
      - set-dev-env-vars
      - docker-setup-navigator-builder-image

  sync-fundings:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - bootstrap-code
      - run:
          name: Node Funding Sync
          command: |
            echo 'export WEBFLOW_API_TOKEN=$WEBFLOW_API_TOKEN' >> $BASH_ENV
            yarn workspace @businessnjgovnavigator/web webflow:fundings-sync

  sync-licenses:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - bootstrap-code
      - run:
          name: Node License Sync
          command: |
            echo 'export WEBFLOW_API_TOKEN=$WEBFLOW_API_TOKEN' >> $BASH_ENV
            yarn workspace @businessnjgovnavigator/content build
            yarn workspace @businessnjgovnavigator/web webflow:licenses-ci-sync

  sync-industries:
    docker:
      - image: $AWS_ACCOUNT_ID_DEV.dkr.ecr.$AWS_REGION.amazonaws.com/navigator_builder:bfs_navigator_builder-20_11_0
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - bootstrap-code
      - run:
          name: Node Industry Sync
          command: |
            echo 'export WEBFLOW_API_TOKEN=$WEBFLOW_API_TOKEN' >> $BASH_ENV
            yarn workspace @businessnjgovnavigator/content build
            yarn workspace @businessnjgovnavigator/web webflow:industries-ci-sync

parameters:
  run_workflow_builder:
    default: false
    type: boolean

workflows:
  release-pipeline:
    jobs:
      - deploy-staging:
          name: staging-deploy
          filters:
            tags:
              only: /^env-update.*/
            branches:
              only:
                - /^release-.*/
                - /^staging-.*/
      - production-hold:
          type: approval
          filters:
            branches:
              only:
                - /^release-.*/
          requires:
            - staging-deploy
      - prepare-release:
          requires:
            - production-hold
      - deploy-production:
          name: production-deploy
          requires:
            - prepare-release
      - sync-fundings:
          name: webflow-fundings-sync
          requires:
            - production-deploy
      - sync-licenses:
          name: webflow-licenses-sync
          requires:
            - production-deploy
      - sync-industries:
          name: webflow-industries-sync
          requires:
            - production-deploy

  webflow-fundings-sync:
    jobs:
      - sync-fundings:
          filters:
            branches:
              only:
                - /^webflow-fundings-sync-.*/

  webflow-licenses-sync:
    jobs:
      - sync-licenses:
          filters:
            branches:
              only:
                - /^webflow-licenses-sync-.*/

  webflow-industries-sync:
    jobs:
      - sync-industries:
          filters:
            branches:
              only:
                - /^webflow-industries-sync-.*/

  build-and-test:
    jobs:
      - docker-build-builder-image:
          filters:
            branches:
              only: /^new-docker-image$/
      - build:
          name: build-with-image
          requires:
            - docker-build-builder-image
      - build:
          filters:
            tags:
              ignore:
                - /^env-update.*/
            branches:
              ignore:
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
                - /^new-docker-image$/
      - lint:
          name: Lint
          filters:
            branches:
              ignore:
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - test:
          name: Unit Tests
          filters:
            branches:
              ignore:
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 1
          enable-dashboard: true
          suite: group1
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 2
          enable-dashboard: true
          suite: group2
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 3
          enable-dashboard: true
          suite: group3
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 4
          enable-dashboard: true
          suite: group4
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 5
          enable-dashboard: true
          suite: group5
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
                - /^staging-.*/
                - /^cms/.*/
                - /^webflow-fundings-sync-.*/
                - /^webflow-licenses-sync-.*/
                - /^webflow-industries-sync-.*/
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 1
          enable-dashboard: true
          suite: group1
          filters:
            branches:
              only:
                - main
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 2
          enable-dashboard: true
          suite: group2
          filters:
            branches:
              only:
                - main
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 3
          enable-dashboard: true
          suite: group3
          filters:
            branches:
              only:
                - main
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 4
          enable-dashboard: true
          suite: group4
          filters:
            branches:
              only:
                - main
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Group 5
          enable-dashboard: true
          suite: group5
          filters:
            branches:
              only:
                - main
          requires:
            - build
      - deploy-dev:
          name: dev-deploy
          filters:
            branches:
              only:
                - main
          requires:
            - build
      - deploy-content:
          name: content-deploy
          filters:
            branches:
              only:
                - content-repo
          requires:
            - build
      - deploy-accessibility-testing:
          name: accessibility-testing-deploy
          filters:
            branches:
              only:
                - accessibility-testing-repo
          requires:
            - build

      #- smoke-tests:
      #    name: Deployment Smoke Tests
      #    enable-dashboard: true
      #    suite: smoke
      #    filters:
      #      branches:
      #        only:
      #          - main
      #    requires:
      #      - dev-deploy
      - merge-content:
          filters:
            branches:
              only:
                - main
          requires:
            - build

  browser-testing:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - build
      # edge integration tests
      - integration-tests:
          name: Integration Tests - Edge - Group 1
          suite: group1
          browser: edge
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Edge - Group 2
          suite: group2
          browser: edge
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Edge - Group 3
          suite: group3
          browser: edge
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Edge - Group 4
          suite: group4
          browser: edge
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Edge - Group 5
          suite: group5
          browser: edge
          requires:
            - build
      # firefox integration tests
      - integration-tests:
          name: Integration Tests - Firefox - Group 1
          suite: group1
          browser: firefox
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Firefox - Group 2
          suite: group2
          browser: firefox
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Firefox - Group 3
          suite: group3
          browser: firefox
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Firefox - Group 4
          suite: group4
          browser: firefox
          requires:
            - build
      - integration-tests:
          name: Integration Tests - Firefox - Group 5
          suite: group5
          browser: firefox
          requires:
            - build

  build-image-pipeline-weekly:
    triggers:
      - schedule:
          # Every Sunday, at Noon.
          cron: "0 12 * * 0"
          filters:
            branches:
              only:
                - main
    jobs:
      - docker-build-builder-image

  build-image-pipeline-manual:
    when: << pipeline.parameters.run_workflow_builder >>
    jobs:
      - docker-build-builder-image
