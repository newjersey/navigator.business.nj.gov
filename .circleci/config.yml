version: 2.1

commands:
  configure-and-build:
    steps:
      - run:
          name: Install Tools
          command: |
            apt update
            apt install -y openjdk-11-jdk-headless
      - checkout
      - restore_cache:
          keys:
            - v2-yarn-deploy-deps-{{ checksum "yarn.lock" }}
            - v2-yarn-deps-{{ checksum "yarn.lock" }}
            - v2-yarn-deploy-deps-
            - v2-yarn-deps-
      - run:
          name: Install yarn packages
          command: yarn install
      - run:
          name: Configure Amplify
          command: ./scripts/amplify-ci/configure.sh
      - run:
          name: Configure Serverless
          command: yarn workspace @businessnjgovnavigator/api serverless config credentials --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY}
      - run:
          name: Set Environment Variables
          command: echo 'export REDIRECT_URL=$REDIRECT_URL_DEV' >> $BASH_ENV
      - run:
          name: Build
          command: yarn build
          

  code-quality:
    steps:
      - run:
          name: Run Typecheck
          command: yarn typecheck
      - run:
          name: Run Cypress Typecheck
          command: yarn workspace @businessnjgovnavigator/web typecheck:cypress
      - run:
          name: Run Prettier
          command: yarn prettier
      - run:
          name: Run Linting
          command: yarn lint
      - run:
          name: Run Spell Checker
          command: yarn workspace @businessnjgovnavigator/web run spellcheck
      - run:
          name: Run Fences
          command: yarn fences
      - run:
          name: Run Shared Unit Tests
          command: yarn workspace @businessnjgovnavigator/shared test:ci
      - run:
          name: Run Web Unit Tests
          command: yarn workspace @businessnjgovnavigator/web test:ci
      - run:
          name: Run API Unit Tests
          command: yarn workspace @businessnjgovnavigator/api test:ci

  perform-cypress-tests:
    parameters:
      enable-dashboard:
        type: boolean
      suite:
        type: string
    steps:
      - run:
          name: Install Additional Tools
          command: apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - run:
          name: Start services
          command: yarn workspace @businessnjgovnavigator/api start & yarn workspace @businessnjgovnavigator/api start:wiremock & yarn workspace @businessnjgovnavigator/web start
          background: true
      - run:
          name: Run Tests
          command: yarn cypress:run --browser=chrome --record=<< parameters.enable-dashboard >> --env SUITE=<< parameters.suite >>
          working_directory: web
      - store_test_results:
          path: web/cypress/results
      - store_artifacts:
          name: Store Cypress Screenshots
          path: web/cypress/screenshots
      - store_artifacts:
          name: Store Cypress Videos
          path: web/cypress/videos

  store-cache:
    steps:
      - save_cache:
          key: v2-yarn-deps-{{ checksum "yarn.lock" }}
          paths:
            - ./.yarn/cache
            - /usr/local/lib/node_modules/npm/node_modules
            - /root/.cache/Cypress

  store-deploy-cache:
    steps:
      - save_cache:
          key: v2-yarn-deploy-deps-{{ checksum "yarn.lock" }}
          paths:
            - ./.yarn/cache
            - ./web/.next/cache
            - /usr/local/lib/node_modules/npm/node_modules
            - /root/.cache/Cypress

  deploy-serverless:
    steps:
      - run:
          name: Deploy Serverless
          command: yarn workspace @businessnjgovnavigator/api serverless deploy --verbose --stage ${STAGE} --region us-east-1

  deploy-amplify:
    steps:
      - run:
          name: Deploy Amplify
          command: ./scripts/amplify-ci/publish.sh

  set-dev-env-vars:
    steps:
      - run:
          name: Set Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_DEV' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_DEV' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_DEV' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_DEV' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_DEV' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_DEV' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_DEV' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_DEV' >> $BASH_ENV

  set-staging-env-vars:
    steps:
      - run:
          name: Set Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_STAGING' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_STAGING' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_STAGING' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_STAGING' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_STAGING' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_STAGING' >> $BASH_ENV

  set-prod-env-vars:
    steps:
      - run:
          name: Set Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_PROD' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_PROD' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_PROD' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_PROD' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_PROD' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_PROD' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_PROD' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_PROD' >> $BASH_ENV
            echo 'export FEATURE_DISABLE_OPERATE=$FEATURE_DISABLE_OPERATE_PROD' >> $BASH_ENV

  deploy:
    steps:
      - configure-and-build
      - deploy-serverless
      - deploy-amplify

  install-chrome:
    steps:
      - run:
          name: Install Chrome
          command: |
            cat \<< EOF > /etc/apt/sources.list.d/google-chrome.list 
            deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main 
            EOF
            wget -O- https://dl.google.com/linux/linux_signing_key.pub |gpg --dearmor > /etc/apt/trusted.gpg.d/google.gpg
            apt update
            apt install -y google-chrome-stable

jobs:
  build:
    docker:
      - image: node:14.18.1-buster
    resource_class: large
    steps:
      - configure-and-build
      - code-quality
      - store-cache
      - store_test_results:
          path: reports/test_results

  deploy-dev:
    docker:
      - image: node:14.18.1-buster
    steps:
      - set-dev-env-vars
      - deploy
      - store-deploy-cache
    environment:
      STAGE: dev
      AMPLIFY_ENV: dev
      MYNJ_PROFILE_LINK: https://myt1.state.nj.us/portal/Desktop

  deploy-staging:
    docker:
      - image: node:14.18.1-buster
    steps:
      - set-staging-env-vars
      - deploy
    environment:
      STAGE: staging
      AMPLIFY_ENV: staging
      MYNJ_PROFILE_LINK: https://myt1.state.nj.us/portal/Desktop

  deploy-production:
    docker:
      - image: node:14.18.1-buster
    steps:
      - set-prod-env-vars
      - deploy
    environment:
      STAGE: prod
      AMPLIFY_ENV: prod
      MYNJ_PROFILE_LINK: https://my.state.nj.us/portal/Desktop

  cypress-tests:
    parameters:
      enable-dashboard:
        type: boolean
        default: false
      suite:
        type: string
    docker:
      - image: node:14.18.1-buster
    resource_class: large
    steps:
      - configure-and-build
      - install-chrome
      - perform-cypress-tests:
          enable-dashboard: << parameters.enable-dashboard >>
          suite: << parameters.suite >>
      - store-deploy-cache
    environment:
      API_BASE_URL: http://localhost:5000/local
      REDIRECT_URL: http://localhost:3000/
      CYPRESS_API_BASE_URL: http://localhost:5000/local

workflows:
  release-pipeline:
    jobs:
      - staging-hold:
          type: approval
          filters:
            branches:
              only:
                - /^release-.*/
      - deploy-staging:
          name: staging-deploy
          filters:
            branches:
              only:
                - /^release-.*/
          requires:
            - staging-hold
      - production-hold:
          type: approval
          filters:
            branches:
              only:
                - /^release-.*/
          requires:
            - staging-deploy
      - deploy-production:
          name: production-deploy
          filters:
            branches:
              only:
                - /^release-.*/
          requires:
            - production-hold

  build-and-test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /^release-.*/
      - cypress-tests:
          name: Cypress Tests - Group 1
          suite: group1
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
      - cypress-tests:
          name: Cypress Tests - Group 2
          suite: group2
          filters:
            branches:
              ignore:
                - main
                - /^release-.*/
      - cypress-tests:
          name: Cypress Tests - Group 1
          enable-dashboard: true
          suite: group1
          filters:
            branches:
              only:
                - main
      - cypress-tests:
          name: Cypress Tests - Group 2
          enable-dashboard: true
          suite: group2
          filters:
            branches:
              only:
                - main
      - deploy-dev:
          name: dev-deploy
          filters:
            branches:
              only:
                - main
          requires:
            - build
