version: 2.1

orbs:
  vulnerability-checker: whitesource/vulnerability-checker@19.10.1

commands:
  configure:
    steps:  
      - run:
          name: Install Tools
          command: |
            apt update
            apt install -y openjdk-11-jdk-headless
      - checkout
      - restore_cache:
          keys:
            - v7-npm-deploy-deps-{{ checksum "package-lock.json" }}-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
            - v7-npm-deps-{{ checksum "package-lock.json" }}-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run: 
          name: Install npm packages
          command: npm install --unsafe-perm
      - run: 
          name: Configure Amplify
          command: ./scripts/amplify-ci/configure.sh
      - run: 
          name: Configure Serverless
          command: npm run --prefix=api serverless config credentials -- --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY}

  code-quality:
    steps: 
      - run: 
          name: Run Typecheck
          command: npm run typecheck
      - run: 
          name: Run Cypress Typecheck
          command: npm run --prefix=web typecheck:cypress
      - run: 
          name: Run Prettier
          command: npm run prettier
      - run: 
          name: Run Linting
          command: npm run lint
      - run:
          name: Run Spell Checker
          command: npm --prefix=web run spellcheck
      - run: 
          name: Run Fences
          command: npm run fences
      - run: 
          name: Run Shared Unit Tests
          command: npm run --prefix=shared test:ci
      - run: 
          name: Run Web Unit Tests
          command: npm run --prefix=web test:ci
      - run: 
          name: Run API Unit Tests
          command: npm run --prefix=api test:ci

  store-cache:
    steps:
      - save_cache:
          key: v7-npm-deps-{{ checksum "package-lock.json" }}-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
          paths:
            - ./node_modules
            - ./web/node_modules
            - ./api/node_modules
            - /usr/local/lib/node_modules/npm/node_modules
            - /root/.cache/Cypress

  store-deploy-cache:
    steps:
      - save_cache:
          key: v7-npm-deploy-deps-{{ checksum "package-lock.json" }}-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
          paths:
            - ./node_modules
            - ./web/node_modules
            - ./web/.next/cache
            - ./api/node_modules
            - /usr/local/lib/node_modules/npm/node_modules
            - /root/.cache/Cypress

  deploy-serverless:
    steps:
      - run:
          name: Deploy Serverless
          command: npm run --prefix=api serverless deploy -- --verbose --stage ${STAGE} --region us-east-1

  deploy-amplify:
    steps:
      - run: 
          name: Deploy Amplify
          command: ./scripts/amplify-ci/publish.sh

  set-dev-env-vars:
    steps:
      - run: 
          name: Set Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_DEV' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_DEV' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_DEV' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_DEV' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_DEV' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_DEV' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_DEV' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_DEV' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_DEV' >> $BASH_ENV

  set-staging-env-vars:
    steps:
      - run: 
          name: Set Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_STAGING' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_STAGING' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_STAGING' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_STAGING' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_STAGING' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_STAGING' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_STAGING' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_STAGING' >> $BASH_ENV

  set-prod-env-vars:
    steps:
      - run: 
          name: Set Environment Variables
          command: |
            echo 'export API_BASE_URL=$API_BASE_URL_AWS_PROD' >> $BASH_ENV
            echo 'export AUTH_DOMAIN=$COGNITO_AUTH_DOMAIN_PROD' >> $BASH_ENV
            echo 'export BUSINESS_NAME_BASE_URL=$BUSINESS_NAME_BASE_URL_PROD' >> $BASH_ENV
            echo 'export COGNITO_WEB_CLIENT_ID=$COGNITO_WEB_CLIENT_ID_PROD' >> $BASH_ENV
            echo 'export LICENSE_STATUS_BASE_URL=$LICENSE_STATUS_BASE_URL_PROD' >> $BASH_ENV
            echo 'export MYNJ_ROLE_NAME=$MYNJ_ROLE_NAME_PROD' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_TOKEN=$MYNJ_SERVICE_TOKEN_PROD' >> $BASH_ENV
            echo 'export MYNJ_SERVICE_URL=$MYNJ_SERVICE_URL_PROD' >> $BASH_ENV
            echo 'export REDIRECT_URL=$REDIRECT_URL_PROD' >> $BASH_ENV
            echo 'export FEATURE_DISABLE_OPERATE=$FEATURE_DISABLE_OPERATE_PROD' >> $BASH_ENV

  deploy:
    steps:
      - configure
      - deploy-serverless
      - deploy-amplify

  install-chrome:
    steps: 
      - run: 
          name: Install Chrome
          command: |
            cat \<< EOF > /etc/apt/sources.list.d/google-chrome.list 
            deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main 
            EOF
            wget -O- https://dl.google.com/linux/linux_signing_key.pub |gpg --dearmor > /etc/apt/trusted.gpg.d/google.gpg
            apt update
            apt install -y google-chrome-stable

jobs:
  build:
    docker:
      - image: node:14.18.1-buster
    resource_class: large
    steps:
      - configure
      - code-quality
      - store-cache
      - store_test_results:
          path: reports/test_results

  deploy-dev:
    docker:
      - image: node:14.18.0-buster
    steps:
      - set-dev-env-vars
      - deploy
      - store-deploy-cache
    environment:
      STAGE: dev
      AMPLIFY_ENV: dev
      MYNJ_PROFILE_LINK: https://myt1.state.nj.us/portal/Desktop

  deploy-staging:
    docker:
      - image: node:14.18.0-buster
    steps:
      - set-staging-env-vars
      - deploy
    environment:
      STAGE: staging
      AMPLIFY_ENV: staging
      MYNJ_PROFILE_LINK: https://myt1.state.nj.us/portal/Desktop

  deploy-production:
    docker:
      - image: node:14.18.0-buster
    steps:
      - set-prod-env-vars
      - deploy
    environment:
      STAGE: prod
      AMPLIFY_ENV: prod
      MYNJ_PROFILE_LINK: https://my.state.nj.us/portal/Desktop

  cypress-tests:
    docker:
      - image: node:14.18.1-buster
    resource_class: large
    steps:
      - configure
      - install-chrome
      - run:
          name: Install Additional Tools
          command: apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - run: npm run --prefix=web build --if-present
      - run:
          name: Start services
          command: npm --prefix=api start & npm --prefix=api run start:wiremock & npm --prefix=web start
          background: true
      - run:
          name: Run Tests
          command: npm run cypress:run -- --browser=chrome
          working_directory: web
      - store-deploy-cache
    environment: 
      API_BASE_URL: http://localhost:5000/local
      REDIRECT_URL: http://localhost:3000/
      CYPRESS_API_BASE_URL: http://localhost:5000/local



workflows:
  release-pipeline:
     jobs: 
      - build:
          filters:
            branches:
             only:
              - main
      - deploy-dev:
          name: dev-deploy
          filters:
            branches:
             only:
              - main
          requires: 
          - build
      - vulnerability-checker/scan: 
          filters:
            branches:
             only:
              - main
      - staging-hold:
          type: approval
          requires:
            - dev-deploy
            - cypress-tests
            - vulnerability-checker/scan
          filters:
            branches:
             only:
              - main
      - deploy-staging:
          name: staging-deploy
          filters:
            branches:
             only:
              - main
          requires: 
          - staging-hold
      - production-hold:
          type: approval
          requires:
            - staging-deploy
      - deploy-production:
          name: production-deploy
          filters:
            branches:
             only:
              - main
          requires: 
          - production-hold
      - cypress-tests:
          filters:
            branches:
             only:
              - main


  build-and-test:
    jobs:
      - build:
          filters:
            branches:
             ignore:
              - main
      - cypress-tests:
          filters:
            branches:
             ignore:
              - main